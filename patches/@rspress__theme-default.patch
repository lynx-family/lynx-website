diff --git a/dist/bundle.js b/dist/bundle.js
index 093b3839df9839cccdb6806d80c84ac9018c3d85..7662f1009c60f9835159c9802d0abb08ea3f6214 100644
--- a/dist/bundle.js
+++ b/dist/bundle.js
@@ -382,28 +382,34 @@ const useDynamicToc = ()=>{
     useSubScribe();
     return useDynamicToc_headers;
 };
+function processTitleElement(element) {
+  const elementClone = element.cloneNode(true);
+  const anchorElement = elementClone.querySelector('.header-anchor');
+  if (anchorElement) elementClone.removeChild(anchorElement);
+  const excludeElements = elementClone.querySelectorAll('.rspress-toc-exclude');
+  excludeElements.forEach((excludeElement)=>{
+      const parentElement = excludeElement.parentElement;
+      if (parentElement) parentElement.removeChild(excludeElement);
+  });
+  const anchorElements = elementClone.querySelectorAll('a');
+  anchorElements.forEach((anchor)=>{
+      const tempContainer = document.createDocumentFragment();
+      while(anchor.firstChild)tempContainer.appendChild(anchor.firstChild);
+      anchor.replaceWith(tempContainer);
+  });
+  return elementClone;
+}
 function updateHeaders(target) {
     const collectedHeaders = [];
     const elements = target?.querySelectorAll('.rspress-doc h2.rspress-doc-outline, h3.rspress-doc-outline, h4.rspress-doc-outline');
     elements?.forEach((el)=>{
         if (el && isElementVisible(el)) {
-            const ele = el.querySelector('.header-anchor');
-            if (ele) {
-                el.removeChild(ele);
-                collectedHeaders.push({
-                    id: el.id,
-                    text: el.innerHTML,
-                    depth: Number.parseInt(el.tagName[1]),
-                    charIndex: 0
-                });
-                const firstChild = el.firstChild;
-                el.insertBefore(ele, firstChild);
-            } else collectedHeaders.push({
-                id: el.id,
-                text: el.innerHTML,
-                depth: Number.parseInt(el.tagName[1]),
-                charIndex: 0
-            });
+          collectedHeaders.push({
+            id: el.id,
+            text: processTitleElement(el).innerHTML,
+            depth: Number.parseInt(el.tagName[1]),
+            charIndex: 0
+          });
         }
     });
     useDynamicToc_headers.length = 0;
